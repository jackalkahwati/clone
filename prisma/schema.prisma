// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String    // Hashed
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Profile and Settings
  aiSettings    AISettings?
  subscription  Subscription?
  
  // Relationships
  emails        Email[]
  messages      Message[]
  documents     Document[]
  tasks         Task[]
  calendars     Calendar[]
  workspaces    Workspace[]
}

model AISettings {
  id                    String  @id @default(cuid())
  userId               String  @unique
  user                 User    @relation(fields: [userId], references: [id])
  autoApprovalThreshold Int     @default(80)
  responseSpeed        Int     @default(70)
  toneFormal          Int     @default(60)
  toneCreative        Int     @default(40)
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  plan            String   // "basic", "pro", "enterprise"
  status          String   // "active", "cancelled", "past_due"
  stripeCustomerId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Email and Messaging
model Email {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  subject     String
  body        String
  sender      String
  recipients  String[]
  status      String   // "read", "unread", "archived"
  aiResponse  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  platform    String   // "slack", "teams"
  content     String
  sender      String
  channel     String
  aiResponse  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Calendar and Scheduling
model Calendar {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  provider    String   // "google", "outlook"
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  calendarId  String
  calendar    Calendar @relation(fields: [calendarId], references: [id])
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  attendees   String[]
  location    String?
  status      String   // "confirmed", "tentative", "cancelled"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Document Management
model Document {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  content     String
  type        String   // "prd", "report", "summary"
  status      String   // "draft", "review", "final"
  aiGenerated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Task Management
model Task {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  title       String
  description String?
  status      String   // "todo", "in_progress", "done"
  priority    String   // "low", "medium", "high"
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Multi-Job Management
model Workspace {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  platform    String   // "jira", "trello", "asana", "notion"
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
